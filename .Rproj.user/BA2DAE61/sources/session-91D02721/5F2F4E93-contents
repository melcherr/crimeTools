#' Calculates and Plots Prevalence Values
#'
#' plot_prevalence() is wrapper around plot_bar and plot_lollipop which calculates prevalence values and there confidence intervals before plotting.
#' @param data Data frame
#' @param x variable names, must be a symbol or character vector
#' @param y variable names, must be a symbol or character vector
#' @param group group (optional)
#' @return A-ggplot()-object
#' @examples
#' plot_prevalence(data = iris, vars = setosa) ;
#' @export

plot_prevalence <- function(data,
                            vars,
                            group = NULL,
                            prop_values,
                            graph_type = "bar",
                            na_values = NULL,
                            na_group = NULL,
                            show_n = TRUE,
                            show_confint = TRUE,
                            conf_level = 0.95,
                            sort = "asc",
                            dec = 0,
                            axis_text_width = 35,
                            ...) {

  if (is.data.frame(data)) {

    data <- srvyr::as_survey_design(.data = data, weights = {{weight}})

  }

  if (sort %nin% c("asc", "desc", "none")) {

    stop("'sort' must take values 'asc', 'desc' or 'none'")

  }

  if (length(prop_values) > 1) {

    vars_labels <-
      data$variables %>%
      dplyr::select({{vars}}) %>%
      sjlabelled::get_label(.) %>%
      syms()

    data$variables <- data$variables %>%
      dplyr::mutate(dplyr::across({{vars}},
                                  ~dplyr::case_when(. %in% prop_values ~ 1,
                                                    . %in% na_values ~ .,
                                                    TRUE ~ 0))) %>%
      sjlabelled::var_labels(!!!vars_labels)

    prop_values <- 1

  }

  group <- enexpr(group)

  if(!is_symbol(group) & !quo_is_null(enquo(group))) group <- parse_expr(group)

  group_enquo <- enquo(group)

  if (!quo_is_null(group_enquo)) {

    srvy_data <- data %>%
      srvyr::mutate(srvyr::across(c({{vars}}, {{group}}),
                                  ~ sjlabelled::as_labelled(.))) %>%
      srvyr_crosstable(data = .,
                       vars = {{vars}},
                       group = {{group}},
                       na_values = na_values,
                       na_group = na_group) %>%
      dplyr::mutate(dplyr::across(c(group_label, var_label),
                                  ~stringr::str_wrap(., axis_text_width))) %>%
      dplyr::filter(var_value %in% prop_values)

    if (sort == "asc") {

      srvy_data_srt <- srvy_data %>%
        dplyr::group_by(group_value) %>%
        dplyr::arrange(proportion)

    } else if (sort == "desc") {

      srvy_data_srt <- srvy_data %>%
        dplyr::group_by(group_value) %>%
        dplyr::arrange(desc(proportion))

    } else {

      srvy_data_srt <- srvy_data

    }

    srt_levels_group <- unique(srvy_data_srt[["group_value"]])
    srt_labels_group <- unique(srvy_data_srt[["group_label"]])

    srt_levels <- unique(srvy_data_srt[["var_name"]])
    srt_labels <- unique(srvy_data_srt[["var_label"]])

    srvy_data <- srvy_data %>%
      dplyr::mutate(prop_label = ifelse(proportion > 0,
                                        to_string_pct(proportion, dec = dec, fac = 100),
                                        NA_character_),
                    group_value = factor(group_value,
                                         levels = srt_levels_group,
                                         labels = srt_labels_group),
                    var_name = factor(var_name,
                                      levels = srt_levels,
                                      labels = srt_labels)) %>%
      dplyr::rename(var = var_name)

    if (show_n) {

      srvy_data <- srvy_data %>%
        dplyr::group_by(var, group_label) %>%
        dplyr::mutate(prop_label = paste0(prop_label, " (", round(sum(n), 0), ")")) %>%
        dplyr::ungroup()

    }

    group_value <- expr(group_value)

  }

  else {

    srvy_data <- data %>%
      srvyr::mutate(srvyr::across({{vars}},
                                  ~sjlabelled::as_labelled(.))) %>%
      srvyr_aggregation({{vars}},
                        conf_level = conf_level,
                        na_values = na_values) %>%
      dplyr::mutate(label = stringr::str_wrap(label, axis_text_width)) %>%
      dplyr::filter(value %in% prop_values)

    if (show_n) {

      srvy_data <- srvy_data %>%
        dplyr::group_by(label) %>%
        dplyr::mutate(label = paste0(label, "\nn = ", round(sum(n), 0))) %>%
        dplyr::ungroup()

    }

    if (sort == "asc") {

      srvy_data_srt <- srvy_data %>%
        dplyr::arrange(proportion)

    } else if (sort == "desc") {

      srvy_data_srt <- srvy_data %>%
        dplyr::arrange(desc(proportion))

    } else {

      srvy_data_srt <- srvy_data

    }

    srt_levels <- srvy_data_srt[["var"]]
    srt_labels <- srvy_data_srt[["label"]]

    srvy_data <- srvy_data %>%
      dplyr::mutate(prop_label = ifelse(proportion > 0,
                                        to_string_pct(proportion, dec = dec, fac = 100),
                                        NA_character_),
                    var = factor(var,
                                 levels = srt_levels,
                                 labels = srt_labels))

    group_value <- expr(NULL)

  }

  if (graph_type == "bar") {

    srvy_data <- srvy_data %>%
      dplyr::mutate(proportion_low = ifelse(proportion_low < 0,
                                            0,
                                            proportion_low))

    plot_bar(data = srvy_data,
             y = var,
             x = proportion,
             xmin = proportion_low,
             xmax = proportion_upp,
             text = prop_label,
             group = {{group_value}},
             show_confint = show_confint,
             ...)

  } else if (graph_type == "lollipop") {

    plot_lollipop(data = srvy_data,
                  y = var,
                  x = proportion,
                  text = prop_label,
                  group = {{group_value}},
                  ...)

  }

}
